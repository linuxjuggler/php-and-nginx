name: "Publishing To ghcr"

on:
  push:
    branches:
      - master
    tags:
      - v*
  pull_request:
    branches: [ master ]

env:
  DOCKER_BUILDKIT: 1
  DOCKER_IMAGE: ghcr.io/zaherg/php-and-nginx


jobs:

  building:
    if: github.event_name != 'pull_request'
    name: Build & Push [ghcr]
    needs: ['phpunit']

    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      max-parallel: 15
      matrix:
        php-version: ['7.2','7.3','7.4']

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 1

      - name: Prepare
        id: prep
        run: |
          VERSION=${{ matrix.php-version }}
          echo ::set-output name=version::${VERSION}
          echo ::set-output name=created::$(date -u +'%Y-%m-%dT%H:%M:%SZ')

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
        with:
          image: tonistiigi/binfmt:latest
          platforms: linux/amd64

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Login to Github Package Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Build & Push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./${{ matrix.php-version }}/Dockerfile
          builder: ${{ steps.buildx.outputs.name }}
          platforms: linux/amd64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.prep.outputs.tags }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
          labels: |
            org.opencontainers.image.title=${{ github.event.repository.name }}
            org.opencontainers.image.description=${{ github.event.repository.description }}
            org.opencontainers.image.url=${{ github.event.repository.html_url }}
            org.opencontainers.image.source=${{ github.event.repository.clone_url }}
            org.opencontainers.image.version=${{ steps.prep.outputs.version }}
            org.opencontainers.image.created=${{ steps.prep.outputs.created }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.licenses=${{ github.event.repository.license.spdx_id }}